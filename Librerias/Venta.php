<?php


 /**
  * Venta Value Object.
  * This class is value object representing database table venta
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */




class Venta {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    var $idVenta;
    var $idProducto;
    var $fecha;
    var $nroProductosVendidos;
    var $comision;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    function Venta () {

    }

    /* function Venta ($idVentaIn) {

          $this->idVenta = $idVentaIn;

    } */


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    function getIdVenta() {
          return $this->idVenta;
    }
    function setIdVenta($idVentaIn) {
          $this->idVenta = $idVentaIn;
    }

    function getIdProducto() {
          return $this->idProducto;
    }
    function setIdProducto($idProductoIn) {
          $this->idProducto = $idProductoIn;
    }

    function getFecha() {
          return $this->fecha;
    }
    function setFecha($fechaIn) {
          $this->fecha = $fechaIn;
    }

    function getNroProductosVendidos() {
          return $this->nroProductosVendidos;
    }
    function setNroProductosVendidos($nroProductosVendidosIn) {
          $this->nroProductosVendidos = $nroProductosVendidosIn;
    }

    function getComision() {
          return $this->comision;
    }
    function setComision($comisionIn) {
          $this->comision = $comisionIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    function setAll($idVentaIn,
          $idProductoIn,
          $fechaIn,
          $nroProductosVendidosIn,
          $comisionIn) {
          $this->idVenta = $idVentaIn;
          $this->idProducto = $idProductoIn;
          $this->fecha = $fechaIn;
          $this->nroProductosVendidos = $nroProductosVendidosIn;
          $this->comision = $comisionIn;
    }


    /** 
     * hasEqualMapping-method will compare two Venta instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    function hasEqualMapping($valueObject) {

          if ($valueObject->getIdVenta() != $this->idVenta) {
                    return(false);
          }
          if ($valueObject->getIdProducto() != $this->idProducto) {
                    return(false);
          }
          if ($valueObject->getFecha() != $this->fecha) {
                    return(false);
          }
          if ($valueObject->getNroProductosVendidos() != $this->nroProductosVendidos) {
                    return(false);
          }
          if ($valueObject->getComision() != $this->comision) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    function toString() {
        $out = $this->getDaogenVersion();
        $out = $out."\nclass Venta, mapping to table venta\n";
        $out = $out."Persistent attributes: \n"; 
        $out = $out."idVenta = ".$this->idVenta."\n"; 
        $out = $out."idProducto = ".$this->idProducto."\n"; 
        $out = $out."fecha = ".$this->fecha."\n"; 
        $out = $out."nroProductosVendidos = ".$this->nroProductosVendidos."\n"; 
        $out = $out."comision = ".$this->comision."\n"; 
        return $out;
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    function cloneObject() {
        $cloned = new Venta();

        $cloned->setIdVenta($this->idVenta); 
        $cloned->setIdProducto($this->idProducto); 
        $cloned->setFecha($this->fecha); 
        $cloned->setNroProductosVendidos($this->nroProductosVendidos); 
        $cloned->setComision($this->comision); 

        return $cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    function getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}

?>